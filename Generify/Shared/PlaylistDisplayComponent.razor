@inject NavigationManager _navManager
@inject IUserAuthService _userAuthService
@inject IPlaylistDefinitionService _playlistDefService
@inject IPlaylistOverviewService _playlistOverviewService

@if (Playlist != null)
{
    <div>
        <p>
            <b>@Playlist.Name</b><br />
            <i>@Playlist.Description</i>
        </p>

        <LoadingComponent IsLoading="_isGenerating" LoadingText="Generating your playlist...">
            <input type="submit" @onclick="() => ExecuteAsync(Playlist)" value="Generate" />

            <input type="button" value="Edit" @onclick="() => EditPlaylistAsync(Playlist.Definition)" />

            <input type="button" value="Delete" @onclick="() => DeletePlaylistAsync(Playlist)" />

            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
                <br /><span class="text-danger">@_errorMessage</span>
            }
        </LoadingComponent>
    </div>
}

@code {
    [Parameter]
    public PlaylistOverview? Playlist { get; set; }

    private string? _errorMessage = null;
    private bool _isGenerating = false;

    public async Task ExecuteAsync(PlaylistOverview playlist)
    {
        _isGenerating = true;
        _errorMessage = null;

        try
        {
            await _playlistDefService.ExecuteGenerationAsync(playlist.Definition.Id.ToString());
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            _isGenerating = false;
        }
    }

    public async Task EditPlaylistAsync(PlaylistDefinition playlist)
    {
        await _playlistDefService.LoadDetailsAsync(playlist);

        _navManager.NavigateTo($"/playlists/edit/{playlist.Id}");
    }

    public async Task DeletePlaylistAsync(PlaylistOverview playlist)
    {
        await _playlistDefService.DeleteAsync(playlist.Definition);

        Playlist = null;
    }
}
